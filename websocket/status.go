// websocket/status.go
package websocket

import (
	"encoding/json"
	"log"
	"net/http"
	"time"
)

// updateUserStatus –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (manager *Manager) updateUserStatus(userID int, status string, isActive bool) {
	manager.statusMutex.Lock()
	defer manager.statusMutex.Unlock()

	if _, exists := manager.UserStatuses[userID]; !exists {
		manager.UserStatuses[userID] = &UserStatus{
			LastSeen: time.Now(),
		}
	}

	statusObj := manager.UserStatuses[userID]
	oldStatus := statusObj.Status

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
	if statusObj.Status != status || statusObj.IsActive != isActive {
		statusObj.Status = status
		statusObj.IsActive = isActive
		statusObj.LastPing = time.Now()
		statusObj.LastSeen = time.Now()

		// –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
		log.Printf("üìä –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –∏–∑–º–µ–Ω–µ–Ω: %s -> %s (–∞–∫—Ç–∏–≤–µ–Ω: %v)",
			userID, oldStatus, status, isActive)

		// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
		statusMsg := Message{
			Type:   "status",
			UserID: userID,
			Status: status,
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º, –∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		if data, err := json.Marshal(statusMsg); err == nil {
			for clientID, client := range manager.Clients {
				// –ò—Å–∫–ª—é—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Ç–∞—Ç—É—Å–∞ —Å–∞–º–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
				if clientID != userID {
					select {
					case client.Send <- data:
					default:
						close(client.Send)
						delete(manager.Clients, client.ID)
					}
				}
			}
		}
	}
}

// checkUserActivity –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏—Ö —Å—Ç–∞—Ç—É—Å—ã
func (manager *Manager) checkUserActivity() {
	for {
		time.Sleep(inactivityTimeout / 2) // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

		manager.statusMutex.Lock()
		now := time.Now()

		for userID, status := range manager.UserStatuses {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
			timeSinceLastSeen := now.Sub(status.LastSeen)
			timeSinceLastPing := now.Sub(status.LastPing)

			// –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			log.Printf("üë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: —Å—Ç–∞—Ç—É—Å=%s, –∞–∫—Ç–∏–≤–µ–Ω=%v, –ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å=%v –Ω–∞–∑–∞–¥, –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–∏–Ω–≥=%v –Ω–∞–∑–∞–¥",
				userID, status.Status, status.IsActive, timeSinceLastSeen, timeSinceLastPing)

			// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –±–æ–ª–µ–µ 60 —Å–µ–∫—É–Ω–¥
			if status.Connected && status.Status == "online" && timeSinceLastPing > 60*time.Second {
				// –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ
				manager.updateUserStatus(userID, "away", false)
				log.Printf("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π", userID)
			}

			// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–∏–Ω–≥–æ–≤–∞–ª —Å–µ—Ä–≤–µ—Ä –±–æ–ª–µ–µ 120 —Å–µ–∫—É–Ω–¥
			if status.Connected && timeSinceLastPing > 120*time.Second {
				// –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ
				manager.updateUserStatus(userID, "offline", false)
				log.Printf("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–π", userID)
			}
		}

		manager.statusMutex.Unlock()
	}
}

// HandleStatus –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (manager *Manager) HandleStatus(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	var msg Message
	if err := json.NewDecoder(r.Body).Decode(&msg); err != nil {
		http.Error(w, "Invalid request body", http.StatusBadRequest)
		return
	}

	if msg.Type != "status" {
		http.Error(w, "Invalid message type", http.StatusBadRequest)
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å —É—á–µ—Ç–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –µ–¥–∏–Ω—ã–π –º–µ—Ç–æ–¥
	manager.updateUserStatus(msg.UserID, msg.Status, msg.IsActive)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–º –¥–µ–π—Å—Ç–≤–∏–∏
	response := map[string]interface{}{
		"success": true,
		"message": "Status updated successfully",
		"userId":  msg.UserID,
		"status":  msg.Status,
	}

	json.NewEncoder(w).Encode(response)
}
