// websocket/server.go
package websocket

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strconv"
	"sync"
	"time"

	"github.com/gorilla/mux"
	"github.com/gorilla/websocket"
)

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
const (
	// –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É
	writeWait = 10 * time.Second

	// –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
	pongWait = 60 * time.Second

	// –ü–µ—Ä–∏–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏–Ω–≥-—Å–æ–æ–±—â–µ–Ω–∏–π
	pingPeriod = (pongWait * 9) / 10

	// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
	maxMessageSize = 512 * 1024 // 512KB

	// –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
	inactivityTimeout = 65 * time.Second
)

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
type DBInfo struct {
	Username string
	Password string
	Host     string
	Port     string
	Database string
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±–º–µ–Ω–∞ —á–µ—Ä–µ–∑ WebSocket
type Message struct {
	Type      string `json:"type"`
	FromID    int    `json:"fromId,omitempty"`
	ToID      int    `json:"toId,omitempty"`
	ProductID int    `json:"productId,omitempty"`
	Content   string `json:"content,omitempty"`
	UserID    int    `json:"userId,omitempty"`
	Status    string `json:"status,omitempty"`
	IsActive  bool   `json:"isActive,omitempty"`
}

// –ö–ª–∏–µ–Ω—Ç WebSocket
type Client struct {
	ID     int
	Socket *websocket.Conn
	Send   chan []byte
}

// –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
type UserStatus struct {
	Status       string    `json:"status"`
	LastPing     time.Time `json:"last_ping"`
	IsActive     bool      `json:"is_active"`
	Connected    bool      `json:"connected"`
	LastSeen     time.Time `json:"last_seen"`
	ConnectionID string    `json:"connection_id"`
}

// –ú–µ–Ω–µ–¥–∂–µ—Ä WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
type Manager struct {
	Clients      map[int]*Client
	Broadcast    chan []byte
	Register     chan *Client
	Unregister   chan *Client
	DB           *sql.DB
	UserStatuses map[int]*UserStatus
	statusMutex  sync.RWMutex
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
var upgrader = websocket.Upgrader{
	ReadBufferSize:  1024,
	WriteBufferSize: 1024,
	CheckOrigin: func(r *http.Request) bool {
		return true // –†–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –ª—é–±–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
	},
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
var globalManager *Manager

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
func SetManager(manager *Manager) {
	if manager != nil {
		globalManager = manager
		log.Println("–ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	} else {
		log.Println("–û—à–∏–±–∫–∞: –ø–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å nil –º–µ–Ω–µ–¥–∂–µ—Ä")
	}
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
func InitDB() (*sql.DB, error) {
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	dbInfo := &DBInfo{
		Username: "root",
		Password: "Vjnbkmlf40782",
		Host:     "localhost",
		Port:     "3306",
		Database: "chatdb",
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	dsn := fmt.Sprintf("%s:%s@tcp(%s:%s)/%s?charset=utf8mb4&parseTime=True&loc=Local",
		dbInfo.Username,
		dbInfo.Password,
		dbInfo.Host,
		dbInfo.Port,
		dbInfo.Database,
	)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
	db, err := sql.Open("mysql", dsn)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: %v", err)
		return nil, err
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
	if err := db.Ping(); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î: %v", err)
		return nil, err
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
	db.SetMaxOpenConns(25)
	db.SetMaxIdleConns(25)
	db.SetConnMaxLifetime(5 * time.Minute)

	log.Println("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü
	if err := createTablesIfNotExist(db); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: %v", err)
		return nil, err
	}

	return db, nil
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
func createTablesIfNotExist(db *sql.DB) error {
	// SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —á–∞—Ç–æ–≤
	createChatsTable := `
	CREATE TABLE IF NOT EXISTS chats (
		id INT AUTO_INCREMENT PRIMARY KEY,
		buyer_id INT NOT NULL,
		seller_id INT NOT NULL,
		product_id INT NOT NULL,
		created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
		INDEX idx_participants (buyer_id, seller_id, product_id)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;`

	// SQL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å–æ–æ–±—â–µ–Ω–∏–π
	createMessagesTable := `
	CREATE TABLE IF NOT EXISTS messages (
		id INT AUTO_INCREMENT PRIMARY KEY,
		chat_id INT NOT NULL,
		sender_id INT NOT NULL,
		message TEXT NOT NULL,
		created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
		FOREIGN KEY (chat_id) REFERENCES chats(id),
		INDEX idx_chat_id (chat_id)
	) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;`

	// –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
	if _, err := db.Exec(createChatsTable); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã chats: %v", err)
	}

	if _, err := db.Exec(createMessagesTable); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã messages: %v", err)
	}

	log.Println("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –∏ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
	return nil
}

// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
func NewManager(db *sql.DB) *Manager {
	return &Manager{
		Broadcast:    make(chan []byte),
		Register:     make(chan *Client),
		Unregister:   make(chan *Client),
		Clients:      make(map[int]*Client),
		DB:           db,
		UserStatuses: make(map[int]*UserStatus),
	}
}

// Run –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞–±–æ—Ç—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞
func (manager *Manager) Run() {
	// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	go manager.checkUserActivity()

	for {
		select {
		case client := <-manager.Register:
			manager.Clients[client.ID] = client
			log.Printf("üë§ –ö–ª–∏–µ–Ω—Ç %d –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è", client.ID)

		case client := <-manager.Unregister:
			if _, ok := manager.Clients[client.ID]; ok {
				delete(manager.Clients, client.ID)
				close(client.Send)
				log.Printf("üë§ –ö–ª–∏–µ–Ω—Ç %d –æ—Ç–∫–ª—é—á–∏–ª—Å—è", client.ID)

				// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "offline" –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
				manager.updateUserStatus(client.ID, "offline", false)
			}

		case message := <-manager.Broadcast:
			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			var msg Message
			if err := json.Unmarshal(message, &msg); err != nil {
				log.Printf("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
				continue
			}

			// –ï—Å–ª–∏ —ç—Ç–æ –ø–∏–Ω–≥-—Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
			if msg.Type == "ping" {
				manager.statusMutex.Lock()
				if status, exists := manager.UserStatuses[msg.UserID]; exists {
					status.LastPing = time.Now()
					status.IsActive = msg.IsActive
					if !msg.IsActive && status.Status == "online" {
						status.Status = "away"
						// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
						statusMsg := Message{
							Type:   "status",
							UserID: msg.UserID,
							Status: "away",
						}
						if data, err := json.Marshal(statusMsg); err == nil {
							manager.broadcast(data)
						}
					}
				}
				manager.statusMutex.Unlock()
				continue
			}

			// –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
			for _, client := range manager.Clients {
				select {
				case client.Send <- message:
				default:
					close(client.Send)
					delete(manager.Clients, client.ID)
				}
			}
		}
	}
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
func (manager *Manager) HandleConnections(w http.ResponseWriter, r *http.Request) {
	// –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ URL
	params := mux.Vars(r)
	userIdStr := params["userId"]
	log.Printf("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É WebSocket —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º userId=%s, –ø–æ–ª–Ω—ã–π URL: %s", userIdStr, r.URL.String())

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ID —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
	userId, err := strconv.Atoi(userIdStr)
	if err != nil {
		log.Printf("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: %s, –æ—à–∏–±–∫–∞: %v", userIdStr, err)
		http.Error(w, "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", http.StatusBadRequest)
		return
	}

	log.Printf("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ID: %d", userId)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
	conn, err := upgrader.Upgrade(w, r, nil)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ WebSocket-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:", err)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
	client := &Client{
		ID:     userId,
		Socket: conn,
		Send:   make(chan []byte, 256),
	}

	// –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å —Ç–∞–∫–∏–º ID —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–∫–ª—é—á–∞–µ–º –µ–≥–æ
	if existingClient, ok := manager.Clients[userId]; ok {
		log.Printf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: %d —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω. –ó–∞–º–µ–Ω—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.", userId)

		// –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
		// –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º –∫–∞–Ω–∞–ª–∞
		delete(manager.Clients, userId)

		// –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –∫–∞–Ω–∞–ª
		existingClient.Socket.Close()
		// –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞–Ω–∞–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∑–∞–∫—Ä—ã—Ç
		select {
		case _, ok := <-existingClient.Send:
			if ok {
				close(existingClient.Send)
			}
		default:
			close(existingClient.Send)
		}
	}

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
	manager.Register <- client

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
	manager.statusMutex.Lock()
	if status, exists := manager.UserStatuses[userId]; exists {
		status.Connected = true
		status.ConnectionID = r.RemoteAddr
		status.LastSeen = time.Now()
	}
	manager.statusMutex.Unlock()

	manager.updateUserStatus(userId, "online", true)
	log.Printf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è —Å –∞–¥—Ä–µ—Å–∞ %s", userId, r.RemoteAddr)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É —Å—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	manager.statusMutex.RLock()
	for userID, status := range manager.UserStatuses {
		statusMsg := Message{
			Type:   "status",
			UserID: userID,
			Status: status.Status,
		}
		if statusData, err := json.Marshal(statusMsg); err == nil {
			client.Send <- statusData
		}
	}
	manager.statusMutex.RUnlock()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—ã –¥–ª—è —á—Ç–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
	go client.readPump(manager)
	go client.writePump()
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
func (c *Client) readPump(manager *Manager) {
	defer func() {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–Ω–∏–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∫–∞–Ω–∞–ª–∞
		if r := recover(); r != nil {
			log.Printf("–ü–∞–Ω–∏–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞ %d: %v", c.ID, r)
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
		manager.statusMutex.Lock()
		if status, exists := manager.UserStatuses[c.ID]; exists {
			status.Connected = false
			status.LastSeen = time.Now()
		}
		manager.statusMutex.Unlock()

		manager.updateUserStatus(c.ID, "offline", false)
		log.Printf("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –æ—Ç–∫–ª—é—á–∏–ª—Å—è", c.ID)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
		manager.Unregister <- c

		// –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
		c.Socket.Close()

		log.Printf("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ readPump –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ %d", c.ID)
	}()

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	c.Socket.SetReadLimit(maxMessageSize)
	c.Socket.SetReadDeadline(time.Now().Add(pongWait))
	c.Socket.SetPongHandler(func(string) error {
		c.Socket.SetReadDeadline(time.Now().Add(pongWait))
		return nil
	})

	for {
		// –ß–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
		_, message, err := c.Socket.ReadMessage()
		if err != nil {
			if websocket.IsUnexpectedCloseError(err, websocket.CloseGoingAway, websocket.CloseAbnormalClosure) {
				log.Printf("–û—à–∏–±–∫–∞: %v", err)
			}
			break
		}

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		var msg Message
		if err := json.Unmarshal(message, &msg); err != nil {
			log.Println("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
			continue
		}

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
		msg.FromID = c.ID

		switch msg.Type {
		case "ping":
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–Ω–≥-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –∫–ª–∏–µ–Ω—Ç—É
			pongMsg := Message{
				Type: "pong",
			}
			if pongData, err := json.Marshal(pongMsg); err == nil {
				c.Send <- pongData
			}
			continue

		case "message":
			// –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–∏–Ω —Ä–∞–∑
			messageData, err := json.Marshal(msg)
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
				continue
			}

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
			manager.saveMessage(msg)
			log.Printf("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î –æ—Ç %d –∫ %d: %s", msg.FromID, msg.ToID, msg.Content)

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
			if recipient, ok := manager.Clients[msg.ToID]; ok {
				recipient.Send <- messageData
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–ø–∏—é –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
			c.Send <- messageData
			continue

		case "status":
			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
			statusMsg := Message{
				Type:   "status",
				UserID: c.ID,
				Status: msg.Status,
			}
			statusData, err := json.Marshal(statusMsg)
			if err != nil {
				log.Printf("–û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: %v", err)
				continue
			}
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
			manager.broadcast(statusData)
			log.Printf("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å %s –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d", msg.Status, c.ID)
		}
	}
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç—É
func (c *Client) writePump() {
	ticker := time.NewTicker(pingPeriod)
	defer func() {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–Ω–∏–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∫–∞–Ω–∞–ª–∞
		if r := recover(); r != nil {
			log.Printf("–ü–∞–Ω–∏–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç—É %d: %v", c.ID, r)
		}

		ticker.Stop()

		// –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
		c.Socket.Close()

		log.Printf("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ writePump –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ %d", c.ID)
	}()

	for {
		select {
		case message, ok := <-c.Send:
			c.Socket.SetWriteDeadline(time.Now().Add(writeWait))
			if !ok {
				// –ö–∞–Ω–∞–ª –∑–∞–∫—Ä—ã—Ç
				c.Socket.WriteMessage(websocket.CloseMessage, []byte{})
				return
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ, –±–µ–∑ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è newline
			// –≠—Ç–æ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º JSON –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
			if err := c.Socket.WriteMessage(websocket.TextMessage, message); err != nil {
				return
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ WriteMessage –≤—ã–∑–æ–≤–∞–º–∏
			n := len(c.Send)
			for i := 0; i < n; i++ {
				message := <-c.Send
				if err := c.Socket.WriteMessage(websocket.TextMessage, message); err != nil {
					return
				}
			}
		case <-ticker.C:
			c.Socket.SetWriteDeadline(time.Now().Add(writeWait))
			if err := c.Socket.WriteMessage(websocket.PingMessage, nil); err != nil {
				return
			}
		}
	}
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
func (manager *Manager) saveMessage(msg Message) {
	// –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º ID —á–∞—Ç–∞
	chatID, err := manager.getChatID(msg.FromID, msg.ToID, msg.ProductID)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID —á–∞—Ç–∞: %v", err)
		return
	}

	// –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
	stmt, err := manager.DB.Prepare(`
		INSERT INTO messages (chat_id, sender_id, message, created_at, read_status)
		VALUES (?, ?, ?, NOW(), FALSE)
	`)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		return
	}
	defer stmt.Close()

	// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
	result, err := stmt.Exec(chatID, msg.FromID, msg.Content)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		return
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ ID –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
	lastID, err := result.LastInsertId()
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		return
	}

	log.Printf("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î (ID: %d, Chat ID: %d, –°—Ç–∞—Ç—É—Å: –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–æ)", lastID, chatID)
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ ID —á–∞—Ç–∞ (—Å–æ–∑–¥–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
func (manager *Manager) getChatID(fromID, toID, productID int) (int, error) {
	var chatID int

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
	if manager.DB == nil {
		return 0, fmt.Errorf("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	if fromID <= 0 || toID <= 0 || productID <= 0 {
		return 0, fmt.Errorf("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–ª–∏ —Ç–æ–≤–∞—Ä–∞: fromID=%d, toID=%d, productID=%d", fromID, toID, productID)
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞
	err := manager.DB.QueryRow(`
		SELECT id FROM chats 
		WHERE (buyer_id = ? AND seller_id = ? AND product_id = ?)
		OR (buyer_id = ? AND seller_id = ? AND product_id = ?)
	`, fromID, toID, productID, toID, fromID, productID).Scan(&chatID)

	if err == nil {
		log.Printf("‚úÖ –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç (ID: %d)", chatID)
		return chatID, nil
	}

	if err != sql.ErrNoRows {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–∞—Ç–∞: %v", err)
		return 0, err
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–æ–ª–∏ (–∫—Ç–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å, –∫—Ç–æ –ø—Ä–æ–¥–∞–≤–µ—Ü)
	// –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º, –∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–º
	buyerID := fromID
	sellerID := toID

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–≤–∞—Ä, —á—Ç–æ–±—ã –≤—ã—è—Å–Ω–∏—Ç—å, –∫—Ç–æ –ø—Ä–æ–¥–∞–≤–µ—Ü
	var realSellerID int
	err = manager.DB.QueryRow("SELECT seller_id FROM products WHERE id = ?", productID).Scan(&realSellerID)
	if err == nil && realSellerID > 0 {
		// –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ–¥–∞–≤—Ü–æ–º —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞, –º–µ–Ω—è–µ–º —Ä–æ–ª–∏
		if realSellerID == fromID {
			buyerID = toID
			sellerID = fromID
		} else if realSellerID == toID {
			buyerID = fromID
			sellerID = toID
		}
		log.Printf("‚úÖ –û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã —Ä–æ–ª–∏: –ø–æ–∫—É–ø–∞—Ç–µ–ª—å=%d, –ø—Ä–æ–¥–∞–≤–µ—Ü=%d (—Ç–æ–≤–∞—Ä –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø—Ä–æ–¥–∞–≤—Ü—É %d)", buyerID, sellerID, realSellerID)
	} else if err != sql.ErrNoRows {
		log.Printf("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–∞ —Ç–æ–≤–∞—Ä–∞ %d: %v, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä–æ–ª–∏", productID, err)
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç, –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	stmt, err := manager.DB.Prepare(`
		INSERT INTO chats (buyer_id, seller_id, product_id, created_at)
		VALUES (?, ?, ?, NOW())
	`)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞: %v", err)
		return 0, err
	}
	defer stmt.Close()

	result, err := stmt.Exec(buyerID, sellerID, productID)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞: %v", err)
		return 0, err
	}

	newChatID, err := result.LastInsertId()
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞: %v", err)
		return 0, err
	}

	log.Printf("‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —á–∞—Ç (ID: %d, –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: %d, –ü—Ä–æ–¥–∞–≤–µ—Ü: %d, –¢–æ–≤–∞—Ä: %d)", newChatID, buyerID, sellerID, productID)
	return int(newChatID), nil
}

// HandleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (manager *Manager) HandleMessage(client *Client, messageData []byte) {
	var msg Message
	if err := json.Unmarshal(messageData, &msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON: %v", err)
		return
	}

	switch msg.Type {
	case "message":
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
		manager.saveMessage(msg)

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
		if recipient, ok := manager.Clients[msg.ToID]; ok {
			select {
			case recipient.Send <- messageData:
			default:
				close(recipient.Send)
				delete(manager.Clients, recipient.ID)
			}
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–ø–∏—é –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
		client.Send <- messageData

	case "status":
		// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
		statusMsg := Message{
			Type:   "status",
			UserID: msg.UserID,
			Status: msg.Status,
		}

		// –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
		statusData, err := json.Marshal(statusMsg)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: %v", err)
			return
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
		manager.broadcast(statusData)
	}
}

// broadcast –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
func (manager *Manager) broadcast(message []byte) {
	for _, client := range manager.Clients {
		select {
		case client.Send <- message:
		default:
			close(client.Send)
			delete(manager.Clients, client.ID)
		}
	}
}

// –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (manager *Manager) updateUserStatus(userID int, status string, isActive bool) {
	manager.statusMutex.Lock()
	defer manager.statusMutex.Unlock()

	if _, exists := manager.UserStatuses[userID]; !exists {
		manager.UserStatuses[userID] = &UserStatus{
			LastSeen: time.Now(),
		}
	}

	statusObj := manager.UserStatuses[userID]
	oldStatus := statusObj.Status

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª—Å—è
	if statusObj.Status != status || statusObj.IsActive != isActive {
		statusObj.Status = status
		statusObj.IsActive = isActive
		statusObj.LastPing = time.Now()
		statusObj.LastSeen = time.Now()

		// –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
		log.Printf("üìä –°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –∏–∑–º–µ–Ω–µ–Ω: %s -> %s (–∞–∫—Ç–∏–≤–µ–Ω: %v)",
			userID, oldStatus, status, isActive)

		// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
		statusMsg := Message{
			Type:   "status",
			UserID: userID,
			Status: status,
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
		if data, err := json.Marshal(statusMsg); err == nil {
			manager.broadcast(data)
		}
	}
}

// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func (manager *Manager) checkUserActivity() {
	for {
		time.Sleep(inactivityTimeout / 2) // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

		manager.statusMutex.Lock()
		now := time.Now()

		for userID, status := range manager.UserStatuses {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
			timeSinceLastSeen := now.Sub(status.LastSeen)
			timeSinceLastPing := now.Sub(status.LastPing)

			// –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			log.Printf("üë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: —Å—Ç–∞—Ç—É—Å=%s, –∞–∫—Ç–∏–≤–µ–Ω=%v, –ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å=%v –Ω–∞–∑–∞–¥, –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–∏–Ω–≥=%v –Ω–∞–∑–∞–¥",
				userID, status.Status, status.IsActive, timeSinceLastSeen, timeSinceLastPing)

			// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–µ–Ω –∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω –±–æ–ª–µ–µ 60 —Å–µ–∫—É–Ω–¥
			if status.Connected && status.Status == "online" && timeSinceLastPing > 60*time.Second {
				// –ü–æ–º–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ
				manager.updateUserStatus(userID, "away", false)
				log.Printf("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π", userID)
			}

			// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–∏–Ω–≥–æ–≤–∞–ª —Å–µ—Ä–≤–µ—Ä –±–æ–ª–µ–µ 120 —Å–µ–∫—É–Ω–¥
			if status.Connected && timeSinceLastPing > 120*time.Second {
				// –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ
				manager.updateUserStatus(userID, "offline", false)
				log.Printf("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–π", userID)
			}
		}

		manager.statusMutex.Unlock()
	}
}

// –û–±–Ω–æ–≤–ª—è–µ–º HandleStatus –¥–ª—è —É—á–µ—Ç–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
func (manager *Manager) HandleStatus(w http.ResponseWriter, r *http.Request) {
	if r.Method != http.MethodPost {
		http.Error(w, "Method not allowed", http.StatusMethodNotAllowed)
		return
	}

	var msg Message
	if err := json.NewDecoder(r.Body).Decode(&msg); err != nil {
		http.Error(w, "Invalid request body", http.StatusBadRequest)
		return
	}

	if msg.Type != "status" {
		http.Error(w, "Invalid message type", http.StatusBadRequest)
		return
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å —É—á–µ—Ç–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
	manager.updateUserStatus(msg.UserID, msg.Status, true)

	w.WriteHeader(http.StatusOK)
}
