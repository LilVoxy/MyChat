document.addEventListener('DOMContentLoaded', function() {
    // –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const messageInput = document.querySelector('.message-form input');
    const sendButton = document.querySelector('.message-form .btn.send');
    const messagesContainer = document.querySelector('.messages-container');
    const chatItems = document.querySelectorAll('.chat-item');
    const closeProductInfoButton = document.querySelector('.product-info .btn.close');
    const productInfoBtn = document.querySelector('.info-btn');
    const productInfo = document.querySelector('.product-info');
    const chatArea = document.querySelector('.chat-area');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    if (!chatArea) {
        console.error('–ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç .chat-area');
    }
    
    if (!messagesContainer) {
        console.error('–ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç .messages-container');
    }
    
    // –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userSelectOverlay = document.getElementById('userSelectOverlay');
    const userIdInput = document.getElementById('userIdInput');
    const startChatButton = document.getElementById('startChatButton');
    
    // –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —Ç–æ–≤–∞—Ä–∞ (–µ—Å–ª–∏ –Ω–µ –º–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ)
    if (window.innerWidth > 1200 && productInfo && chatArea) {
        productInfo.style.display = 'flex';
        chatArea.style.paddingRight = '300px';
    }
    
    // –≠–ª–µ–º–µ–Ω—Ç—ã –ø–∞–Ω–µ–ª–∏ —ç–º–æ–¥–∑–∏
    const emojiButton = document.querySelector('.btn.emoji');
    const emojiPanel = document.querySelector('.emoji-panel');
    const emojiTabs = document.querySelectorAll('.emoji-tab');
    const emojiItems = document.querySelectorAll('.emoji-item');
    
    // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ URL
    let userId = window.getUserIdFromUrl();
    
    // –ï—Å–ª–∏ ID –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —á–∞—Ç–∞
    if (userId === null) {
        console.log('‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, —á–∞—Ç –Ω–µ –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        window.updateDebugPanel(null, '–Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        return;
    }
    
    console.log(`‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID: ${userId}`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –ø–∞–Ω–µ–ª—å
    window.updateDebugPanel(userId, '–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    let currentChatUserId = userId === 1 ? 2 : 1;
    let currentProductId = 1;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.title = `–ß–∞—Ç - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}`;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userIdIndicator = document.createElement('div');
    userIdIndicator.classList.add('user-id-indicator');
    userIdIndicator.innerHTML = `<strong>–í–∞—à ID:</strong> ${userId}`;
    userIdIndicator.style.position = 'absolute';
    userIdIndicator.style.top = '10px';
    userIdIndicator.style.right = '10px';
    userIdIndicator.style.backgroundColor = '#4caf50';
    userIdIndicator.style.color = 'white';
    userIdIndicator.style.padding = '5px 10px';
    userIdIndicator.style.borderRadius = '5px';
    userIdIndicator.style.zIndex = '1000';
    document.body.appendChild(userIdIndicator);
    
    // WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    let socket;
    let reconnectAttempts = 0;
    const MAX_RECONNECT_ATTEMPTS = 5;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    const PING_INTERVAL = 30000; // 30 —Å–µ–∫—É–Ω–¥
    const PING_TIMEOUT = 5000; // 5 —Å–µ–∫—É–Ω–¥
    let pingTimeout = null;
    let pingInterval = null;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
    let isIntentionalClose = false;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const ACTIVITY_TIMEOUT = 60000; // 60 —Å–µ–∫—É–Ω–¥
    const INACTIVITY_CHECK_INTERVAL = 30000; // 30 —Å–µ–∫—É–Ω–¥
    const RECONNECT_DELAY = 5000; // 5 —Å–µ–∫—É–Ω–¥
    let lastActivityTime = Date.now();
    let isUserActive = true;
    let currentStatus = 'offline';
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    function updateLastActivity() {
        lastActivityTime = Date.now();
        if (!isUserActive) {
            isUserActive = true;
            updateStatus('online');
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
    function updateStatus(newStatus) {
        if (currentStatus !== newStatus) {
            currentStatus = newStatus;
            console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞: ${newStatus}`);
            
            if (socket && socket.readyState === WebSocket.OPEN) {
                const statusMsg = {
                    type: 'status',
                    userId: userId,
                    status: newStatus,
                    isActive: isUserActive
                };
                socket.send(JSON.stringify(statusMsg));
            } else {
                // –ï—Å–ª–∏ —Å–æ–∫–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ HTTP
                fetch('/api/status', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        type: 'status',
                        userId: userId,
                        status: newStatus,
                        isActive: isUserActive
                    })
                }).catch(error => console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error));
            }
        }
    }
    
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    document.addEventListener('mousemove', updateLastActivity);
    document.addEventListener('keypress', updateLastActivity);
    document.addEventListener('click', updateLastActivity);
    document.addEventListener('scroll', updateLastActivity);
    document.addEventListener('touchstart', updateLastActivity);
    
    // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    function checkUserActivity() {
        const now = Date.now();
        if (now - lastActivityTime > ACTIVITY_TIMEOUT && isUserActive) {
            isUserActive = false;
            updateStatus('away');
        }
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    setInterval(checkUserActivity, INACTIVITY_CHECK_INTERVAL);
    
    function initWebSocket() {
        if (socket) {
            socket.close();
        }

        socket = new WebSocket(`ws://${window.location.host}/ws/${userId}`);
        
        socket.onopen = function(e) {
            console.log(`‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            reconnectAttempts = 0;
            window.updateDebugPanel(userId, '–ø–æ–¥–∫–ª—é—á–µ–Ω');

            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            const statusRequest = {
                type: 'status_request',
                userId: userId
            };
            socket.send(JSON.stringify(statusRequest));

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å —Å —É—á–µ—Ç–æ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            updateStatus(isUserActive ? 'online' : 'away');

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏–Ω–≥-—Å–æ–æ–±—â–µ–Ω–∏–π
            pingInterval = setInterval(() => {
                if (socket.readyState === WebSocket.OPEN) {
                    socket.send(JSON.stringify({ 
                        type: 'ping',
                        userId: userId,
                        isActive: isUserActive
                    }));
                    pingTimeout = setTimeout(() => {
                        console.log('–ü–∏–Ω–≥ —Ç–∞–π–º–∞—É—Ç, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
                        isIntentionalClose = true;
                        socket.close();
                    }, PING_TIMEOUT);
                }
            }, PING_INTERVAL);
        };

        socket.onclose = function(event) {
            console.log('WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ');
            window.updateDebugPanel(userId, '–æ—Ç–∫–ª—é—á–µ–Ω');

            // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
            if (pingInterval) clearInterval(pingInterval);
            if (pingTimeout) clearTimeout(pingTimeout);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Ñ—Ñ–ª–∞–π–Ω –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            updateStatus('offline');

            // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –±—ã–ª–æ –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
            if (!isIntentionalClose && reconnectAttempts < MAX_RECONNECT_ATTEMPTS) {
                reconnectAttempts++;
                console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${reconnectAttempts} –∏–∑ ${MAX_RECONNECT_ATTEMPTS}`);
                window.updateDebugPanel(userId, `–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (${reconnectAttempts}/${MAX_RECONNECT_ATTEMPTS})...`);
                setTimeout(initWebSocket, RECONNECT_DELAY);
            } else {
                window.updateDebugPanel(userId, isIntentionalClose ? '–æ—Ç–∫–ª—é—á–µ–Ω' : '–æ—Ç–∫–ª—é—á–µ–Ω (–ø—Ä–µ–≤—ã—à–µ–Ω–æ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫)');
            }
        };

        socket.onmessage = function(event) {
            console.log(`üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket:`, event.data);
            try {
                const messages = event.data.split('\n').filter(msg => msg.trim());
                messages.forEach(msg => {
                    try {
                        const data = JSON.parse(msg);
                        
                        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–Ω–≥-—Å–æ–æ–±—â–µ–Ω–∏—è
                        if (data.type === 'pong') {
                            if (pingTimeout) {
                                clearTimeout(pingTimeout);
                                pingTimeout = null;
                            }
                            return;
                        }

                        switch (data.type) {
                            case 'status':
                                console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞:`, data);
                                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ —á–∞—Ç–æ–≤
                                updateUserStatus(data.userId, data.status);
                                break;

                            case 'message':
                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ —Ç–µ–∫—É—â–µ–º—É —á–∞—Ç—É
                                if ((data.fromId == currentChatUserId && data.toId == userId) || 
                                    (data.fromId == userId && data.toId == currentChatUserId)) {
                                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤—Ö–æ–¥—è—â–µ–µ –∏–ª–∏ –∏—Å—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                    const isIncoming = data.fromId == currentChatUserId;
                                    
                                    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
                                    displayMessage(data.content, isIncoming, data.timestamp);
                                    
                                    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ —á–∞—Ç–æ–≤
                                    updateLastMessage(currentChatUserId, data.content);
                                } else if (data.toId == userId) {
                                    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –¥—Ä—É–≥–æ–≥–æ —á–∞—Ç–∞, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
                                    incrementUnreadCount(data.fromId);
                                }
                                break;
                        }
                    } catch (e) {
                        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ JSON —Å–æ–æ–±—â–µ–Ω–∏—è:", e);
                    }
                });
            } catch (e) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:", e);
            }
        };
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º WebSocket –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    initWebSocket();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    loadUserChats();
    
    // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async function loadUserChats() {
        try {
            const response = await fetch(`/api/chats?userId=${userId}`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            console.log('üì¨ –ü–æ–ª—É—á–µ–Ω—ã —á–∞—Ç—ã:', data);
            
            // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
            const chatList = document.querySelector('.chat-list');
            if (!chatList) {
                console.error('–ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç .chat-list');
                return;
            }
            
            chatList.innerHTML = '';
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ data.chats —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
            if (!data.chats || !Array.isArray(data.chats)) {
                console.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–æ–≤:', data);
                chatList.innerHTML = '<div class="no-chats">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤</div>';
                return;
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫
            data.chats.forEach(chat => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç
                if (!chat || chat.id === null || chat.id === undefined) {
                    console.warn('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —á–∞—Ç–∞:', chat);
                    return; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —á–∞—Ç
                }

                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ (–µ—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø–æ–∫—É–ø–∞—Ç–µ–ª—å, —Ç–æ –±–µ—Ä–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞, –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç)
                const otherUserId = chat.buyerId == userId ? chat.sellerId : chat.buyerId;
                
                if (!otherUserId) {
                    console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –¥–ª—è —á–∞—Ç–∞:', chat);
                    return; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —á–∞—Ç
                }
                
                // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —á–∞—Ç–∞
                const chatItem = document.createElement('div');
                chatItem.className = 'chat-item';
                chatItem.setAttribute('data-userId', otherUserId);
                chatItem.setAttribute('data-chatId', chat.id);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
                chatItem.onclick = () => selectChat(otherUserId);
                
                // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º HTML —á–∞—Ç–∞
                chatItem.innerHTML = `
                    <div class="chat-item-avatar">
                        <img src="/images/avatar.png" alt="User Avatar">
                        <span class="chat-item-status offline"></span>
                    </div>
                    <div class="chat-item-info">
                        <div class="chat-item-name">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${otherUserId}</div>
                        <div class="chat-item-last-message">${chat.lastMessage || '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π'}</div>
                    </div>
                    <div class="chat-item-time">${chat.lastMessageTime || ''}</div>
                `;
                
                // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫
                chatList.appendChild(chatItem);
            });
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å —á–∞—Ç—ã, –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π
            if (data.chats.length > 0) {
                try {
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —á–∞—Ç–∞
                    const firstChatUserId = data.chats[0].buyerId == userId ? data.chats[0].sellerId : data.chats[0].buyerId;
                    
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
                    currentChatUserId = firstChatUserId;
                    
                    // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —á–∞—Ç
                    const firstChatItem = document.querySelector(`.chat-item[data-userId="${firstChatUserId}"]`);
                    if (firstChatItem) {
                        firstChatItem.classList.add('active');
                        updateChatHeader(firstChatItem); // –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–ø–∫—É —á–∞—Ç–∞
                        loadChatHistory(firstChatUserId); // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞
                    } else {
                        console.warn(`–ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${firstChatUserId}`);
                        updateChatHeader(null);
                    }
                } catch (innerError) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–µ—Ä–≤–æ–≥–æ —á–∞—Ç–∞:', innerError);
                    updateChatHeader(null);
                }
            } else {
                // –ï—Å–ª–∏ —á–∞—Ç–æ–≤ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                chatList.innerHTML = '<div class="no-chats">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —á–∞—Ç–æ–≤</div>';
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞ –Ω–∞ "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç"
                const titleElement = document.querySelector('.chat-header .user-info h3');
                if (titleElement) {
                    titleElement.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç';
                }
            }
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —á–∞—Ç–æ–≤:', error);
            const chatList = document.querySelector('.chat-list');
            if (chatList) {
                chatList.innerHTML = '<div class="error-message">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É</div>';
            }
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞ –Ω–∞ "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç" –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            const titleElement = document.querySelector('.chat-header .user-info h3');
            if (titleElement) {
                titleElement.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç';
            }
        }
    }
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
    function sendMessageToServer(text) {
        if (socket && socket.readyState === WebSocket.OPEN) {
            const message = {
                type: 'message',
                fromId: userId,
                toId: currentChatUserId,
                productId: currentProductId,
                content: text
            };
            
            socket.send(JSON.stringify(message));
            return true;
        } else {
            console.error("WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
            return false;
        }
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ —á–∞—Ç–æ–≤
    function updateLastMessage(chatUserId, text) {
        const chatItem = findChatItemByUserId(chatUserId);
        if (chatItem) {
            const lastMessageElement = chatItem.querySelector('.chat-item-last-message');
            if (lastMessageElement) {
                lastMessageElement.textContent = text;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            const timeElement = chatItem.querySelector('.chat-item-time');
            if (timeElement) {
                const now = new Date();
                timeElement.textContent = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;
            }
        }
    }
    
    // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    function incrementUnreadCount(fromUserId) {
        const chatItem = findChatItemByUserId(fromUserId);
        if (chatItem) {
            let unreadElement = chatItem.querySelector('.chat-item-unread');
            
            if (unreadElement) {
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
                let count = parseInt(unreadElement.textContent) || 0;
                unreadElement.textContent = count + 1;
            } else {
                // –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç—á–∏–∫, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                const chatMeta = chatItem.querySelector('.chat-item-info');
                if (chatMeta) {
                    unreadElement = document.createElement('span');
                    unreadElement.className = 'chat-item-unread';
                    unreadElement.textContent = '1';
                    chatMeta.appendChild(unreadElement);
                }
            }
        }
    }
    
    // –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ —á–∞—Ç–∞ –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    function findChatItemByUserId(userId) {
        return document.querySelector(`.chat-item[data-userId="${userId}"]`);
    }
    
    // –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è
    const isMobile = window.innerWidth <= 576;
    const chatList = document.querySelector('.chat-list');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥" –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
    if (isMobile) {
        const backButton = document.createElement('button');
        backButton.classList.add('btn', 'back-btn');
        backButton.innerHTML = '<i class="fas fa-arrow-left"></i>';
        backButton.style.display = 'block';
        
        const headerActions = document.querySelector('.header-actions');
        headerActions.parentNode.insertBefore(backButton, headerActions);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Ç-–ª–∏—Å—Ç, —Å–∫—Ä—ã–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å —á–∞—Ç–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
        chatList.classList.add('active');
        chatArea.classList.add('hidden');
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        backButton.addEventListener('click', function() {
            chatList.classList.add('active');
            chatArea.classList.remove('active');
            chatArea.classList.add('hidden');
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    sendButton.addEventListener('click', sendMessage);
    messageInput.addEventListener('keypress', function(e) {
        if (e.key === 'Enter') {
            sendMessage();
        }
    });
    
    // –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–ª–∏–∫–æ–≤ –ø–æ —á–∞—Ç–∞–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
    chatList.addEventListener('click', function(e) {
        // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à–∏–π —ç–ª–µ–º–µ–Ω—Ç .chat-item –æ—Ç –º–µ—Å—Ç–∞ –∫–ª–∏–∫–∞
        const chatItem = e.target.closest('.chat-item');
        if (chatItem) {
            // –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            document.querySelectorAll('.chat-item').forEach(chat => chat.classList.remove('active'));
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
            chatItem.classList.add('active');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
            currentChatUserId = parseInt(chatItem.getAttribute('data-userId'));
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–ø–∫—É —á–∞—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            updateChatHeader(chatItem);
            
            // –ù–∞ –º–æ–±–∏–ª—å–Ω–æ–º: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å —á–∞—Ç–∞, —Å–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
            if (isMobile) {
                chatList.classList.remove('active');
                chatArea.classList.add('active');
                chatArea.classList.remove('hidden');
            } else {
                // –ù–∞ –¥–µ—Å–∫—Ç–æ–ø–µ: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
                if (window.innerWidth > 1200) {
                    productInfo.style.display = 'flex';
                    chatArea.style.paddingRight = '300px';
                }
            }
            
            // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            const unread = chatItem.querySelector('.chat-item-unread');
            if (unread) {
                unread.remove();
            }
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
            loadChatHistory(currentChatUserId);
        }
    });
    
    // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
    if (productInfoBtn) {
        productInfoBtn.addEventListener('click', function() {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ –ø–∞–Ω–µ–ª—å
            if (productInfo.style.display === 'flex') {
                // –ï—Å–ª–∏ –ø–∞–Ω–µ–ª—å —É–∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è, —Å–∫—Ä—ã–≤–∞–µ–º –µ—ë
                productInfo.style.display = 'none';
                chatArea.style.paddingRight = '0';
            } else {
                // –ï—Å–ª–∏ –ø–∞–Ω–µ–ª—å —Å–∫—Ä—ã—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë
                productInfo.style.display = 'flex';
                chatArea.style.paddingRight = '300px';
            }
        });
    }
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –∫—Ä–µ—Å—Ç–∏–∫
    if (closeProductInfoButton) {
        closeProductInfoButton.addEventListener('click', function() {
            productInfo.style.display = 'none';
            chatArea.style.paddingRight = '0';
        });
    }
    
    // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è –ø–∞–Ω–µ–ª–∏ —ç–º–æ–¥–∑–∏
    
    // –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ —ç–º–æ–¥–∑–∏
    emojiButton.addEventListener('click', function(e) {
        e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —Å–∞–º—É –∫–Ω–æ–ø–∫—É
        emojiPanel.classList.toggle('active');
        emojiButton.classList.toggle('active');
    });
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏ —ç–º–æ–¥–∑–∏ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –Ω–µ—ë
    document.addEventListener('click', function(e) {
        if (!emojiPanel.contains(e.target) && e.target !== emojiButton) {
            emojiPanel.classList.remove('active');
            emojiButton.classList.remove('active');
        }
    });
    
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫ —ç–º–æ–¥–∑–∏
    emojiTabs.forEach(tab => {
        tab.addEventListener('click', function() {
            // –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫
            emojiTabs.forEach(t => t.classList.remove('active'));
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–µ
            this.classList.add('active');
            
            // –ü–æ–ª—É—á–∞–µ–º ID –≥—Ä—É–ø–ø—ã —ç–º–æ–¥–∑–∏ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
            const targetGroup = this.getAttribute('data-tab');
            
            // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –≥—Ä—É–ø–ø—ã —ç–º–æ–¥–∑–∏
            document.querySelectorAll('.emoji-group').forEach(group => {
                group.classList.remove('active');
            });
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É
            document.getElementById(targetGroup).classList.add('active');
        });
    });
    
    // –í—Å—Ç–∞–≤–∫–∞ —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
    emojiItems.forEach(item => {
        item.addEventListener('click', function() {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –≤–≤–æ–¥–∞
            const cursorPos = messageInput.selectionStart;
            const textBefore = messageInput.value.substring(0, cursorPos);
            const textAfter = messageInput.value.substring(cursorPos);
            
            // –í—Å—Ç–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞
            messageInput.value = textBefore + this.innerText + textAfter;
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–∫—É—Å –∏ –ø–æ–∑–∏—Ü–∏—é –∫—É—Ä—Å–æ—Ä–∞ –ø–æ—Å–ª–µ —ç–º–æ–¥–∑–∏
            messageInput.focus();
            messageInput.selectionStart = cursorPos + this.innerText.length;
            messageInput.selectionEnd = cursorPos + this.innerText.length;
        });
    });
    
    // –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    function loadChatHistory(chatUserId) {
        // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π
        messagesContainer.innerHTML = `
            <div class="loading-messages">
                <div class="spinner"></div>
                <p>–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π...</p>
            </div>
        `;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        fetch(`/api/messages?userId=${userId}&chatWith=${chatUserId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP –æ—à–∏–±–∫–∞: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                console.log('–ü–æ–ª—É—á–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', data);
                
                // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏
                messagesContainer.innerHTML = '';
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
                if (data.messages && data.messages.length > 0) {
                    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –¥–∞—Ç–µ (–æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º)
                    const sortedMessages = data.messages.sort((a, b) => {
                        const dateA = new Date(a.createdAt || a.timestamp);
                        const dateB = new Date(b.createdAt || b.timestamp);
                        return dateA - dateB;
                    });
                    
                    let currentDate = null;
                    
                    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
                    sortedMessages.forEach(msg => {
                        const messageDate = new Date(msg.createdAt || msg.timestamp);
                        const formattedDate = formatMessageDate(messageDate);
                        
                        // –ï—Å–ª–∏ –¥–∞—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                        if (currentDate !== formattedDate.date) {
                            currentDate = formattedDate.date;
                            const dateDivider = document.createElement('div');
                            dateDivider.classList.add('date-divider');
                            dateDivider.innerHTML = `<span>${currentDate}</span>`;
                            messagesContainer.appendChild(dateDivider);
                        }
                        
                        const isIncoming = msg.fromId !== userId;
                        displayMessage(msg.content, isIncoming, formattedDate.time);
                    });
                    
                    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                    setTimeout(() => {
                        messagesContainer.scrollTop = messagesContainer.scrollHeight;
                    }, 100);
                } else {
                    // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    messagesContainer.innerHTML = `
                        <div class="no-messages">
                            <p>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º</p>
                            <p>–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!</p>
                        </div>
                    `;
                }
            })
            .catch(error => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
                
                // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
                messagesContainer.innerHTML = `
                    <div class="error-message">
                        <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π</p>
                        <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É</p>
                    </div>
                `;
            });
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
    function displayMessage(text, isIncoming, timestamp) {
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        if (!timestamp) {
            const now = new Date();
            timestamp = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;
        }
        
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        const messageElement = document.createElement('div');
        messageElement.classList.add('message', isIncoming ? 'incoming' : 'outgoing');
        
        if (isIncoming) {
            // –ê–≤–∞—Ç–∞—Ä –¥–ª—è –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            const avatarSrc = document.querySelector('.chat-header .avatar img').src;
            
            messageElement.innerHTML = `
                <div class="avatar">
                    <img src="${avatarSrc}" alt="–ê–≤–∞—Ç–∞—Ä">
                </div>
                <div class="message-content">
                    <div class="message-bubble">
                        <p>${text}</p>
                    </div>
                    <div class="message-time">${timestamp}</div>
                </div>
            `;
        } else {
            messageElement.innerHTML = `
                <div class="message-content">
                    <div class="message-bubble">
                        <p>${text}</p>
                    </div>
                    <div class="message-time">${timestamp}</div>
                </div>
            `;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        messagesContainer.appendChild(messageElement);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        setTimeout(() => {
            messageElement.style.animationDelay = '0s';
        }, 10);
        
        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –Ω–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
    }
    
    // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    function sendMessage() {
        const messageText = messageInput.value.trim();
        
        if (messageText) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            if (sendMessageToServer(messageText)) {
                // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                const now = new Date();
                const formattedDate = formatMessageDate(now);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–∞—Ç—ã
                const lastDivider = messagesContainer.querySelector('.date-divider:last-of-type');
                const lastDividerText = lastDivider ? lastDivider.querySelector('span').textContent : null;
                
                if (!lastDividerText || lastDividerText !== formattedDate.date) {
                    const dateDivider = document.createElement('div');
                    dateDivider.classList.add('date-divider');
                    dateDivider.innerHTML = `<span>${formattedDate.date}</span>`;
                    messagesContainer.appendChild(dateDivider);
                }
                
                // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
                displayMessage(messageText, false, formattedDate.time);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ —á–∞—Ç–æ–≤
                updateLastMessage(currentChatUserId, messageText);
                
                // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
                messageInput.value = '';
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å —ç–º–æ–¥–∑–∏, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞
                emojiPanel.classList.remove('active');
                emojiButton.classList.remove('active');
            }
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∞–Ω–∏—è
    function showTypingIndicator() {
        const typingIndicator = document.querySelector('.typing-indicator');
        
        // –ï—Å–ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ–≥–æ
        if (typingIndicator) {
            typingIndicator.classList.add('active');
        } else {
            // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∞–Ω–∏—è
            const avatarSrc = document.querySelector('.chat-header .avatar img').src;
            const newTypingIndicator = document.createElement('div');
            newTypingIndicator.classList.add('typing-indicator');
            
            newTypingIndicator.innerHTML = `
                <div class="avatar">
                    <img src="${avatarSrc}" alt="–ê–≤–∞—Ç–∞—Ä">
                </div>
                <div class="typing-bubble">
                    <span class="typing-text">–ø–µ—á–∞—Ç–∞–µ—Ç</span>
                    <div class="typing-dots">
                        <span class="typing-dot"></span>
                        <span class="typing-dot"></span>
                        <span class="typing-dot"></span>
                    </div>
                </div>
            `;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            messagesContainer.appendChild(newTypingIndicator);
            
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
            setTimeout(() => {
                newTypingIndicator.classList.add('active');
            }, 10);
            
            // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—É
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–µ—á–∞—Ç–∞–Ω–∏—è
    function hideTypingIndicator() {
        const typingIndicator = document.querySelector('.typing-indicator');
        
        if (typingIndicator) {
            typingIndicator.classList.remove('active');
            
            // –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
            setTimeout(() => {
                if (typingIndicator.parentNode) {
                    typingIndicator.parentNode.removeChild(typingIndicator);
                }
            }, 300);
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —à–∞–ø–∫–∏ —á–∞—Ç–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    function updateChatHeader(chatItem) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ chatItem —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if (!chatItem) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞: chatItem is null');
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            const titleElement = document.querySelector('.chat-header .user-info h3');
            if (titleElement) {
                titleElement.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç';
            }
            
            return;
        }

        try {
            const userNameElement = chatItem.querySelector('.chat-item-name');
            const userName = userNameElement ? userNameElement.textContent : '–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç';
            
            const avatarImg = chatItem.querySelector('.chat-item-avatar img');
            const avatarSrc = avatarImg ? avatarImg.src : '/images/avatar.png';
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            const titleElement = document.querySelector('.chat-header .user-info h3');
            if (titleElement) {
                titleElement.textContent = userName;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä, –µ—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            const headerAvatar = document.querySelector('.chat-header .avatar img');
            if (headerAvatar) {
                headerAvatar.src = avatarSrc;
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —à–∞–ø–∫–∏ —á–∞—Ç–∞:', error);
            
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            const titleElement = document.querySelector('.chat-header .user-info h3');
            if (titleElement) {
                titleElement.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç';
            }
        }
    }
    
    // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —á–∞—Ç –≤–Ω–∏–∑ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
    function showNewChatForm() {
        const newChatOverlay = document.getElementById('newChatOverlay');
        if (newChatOverlay) {
            newChatOverlay.style.display = 'flex';
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
    function hideNewChatForm() {
        const newChatOverlay = document.getElementById('newChatOverlay');
        if (newChatOverlay) {
            newChatOverlay.style.display = 'none';
        }
    }
    
    // –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
    function createNewChat() {
        const recipientId = parseInt(document.getElementById('recipientIdInput').value);
        const productId = parseInt(document.getElementById('productIdInput').value);
        const initialMessage = document.getElementById('initialMessageInput').value.trim();
        
        if (!recipientId || !productId || !initialMessage) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã');
            return;
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket
        if (socket && socket.readyState === WebSocket.OPEN) {
            const message = {
                type: 'message',
                fromId: userId,
                toId: recipientId,
                productId: productId,
                content: initialMessage
            };
            
            socket.send(JSON.stringify(message));
            
            // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
            hideNewChatForm();
            
            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
            document.getElementById('initialMessageInput').value = '';
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É (–¥–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ)
            setTimeout(() => {
                loadUserChats();
            }, 1000);
            
            return true;
        } else {
            alert("WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            return false;
        }
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —Ñ–æ—Ä–º—ã –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
    const newChatBtn = document.getElementById('newChatBtn');
    if (newChatBtn) {
        newChatBtn.addEventListener('click', showNewChatForm);
    }
    
    const cancelNewChatButton = document.getElementById('cancelNewChatButton');
    if (cancelNewChatButton) {
        cancelNewChatButton.addEventListener('click', hideNewChatForm);
    }
    
    const startNewChatButton = document.getElementById('startNewChatButton');
    if (startNewChatButton) {
        startNewChatButton.addEventListener('click', createNewChat);
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏—è
    function formatMessageDate(date) {
        const now = new Date();
        const messageDate = new Date(date);
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è
        const hours = messageDate.getHours().toString().padStart(2, '0');
        const minutes = messageDate.getMinutes().toString().padStart(2, '0');
        const timeStr = `${hours}:${minutes}`;
        
        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
        if (messageDate.toDateString() === now.toDateString()) {
            return { date: '–°–µ–≥–æ–¥–Ω—è', time: timeStr };
        }
        
        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—á–µ—Ä–∞
        const yesterday = new Date(now);
        yesterday.setDate(yesterday.getDate() - 1);
        if (messageDate.toDateString() === yesterday.toDateString()) {
            return { date: '–í—á–µ—Ä–∞', time: timeStr };
        }
        
        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ–º –≥–æ–¥—É
        const months = [
            '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
            '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'
        ];
        
        if (messageDate.getFullYear() === now.getFullYear()) {
            return {
                date: `${messageDate.getDate()} ${months[messageDate.getMonth()]}`,
                time: timeStr
            };
        }
        
        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥—Ä—É–≥–æ–º –≥–æ–¥—É
        return {
            date: `${messageDate.getDate()} ${months[messageDate.getMonth()]} ${messageDate.getFullYear()}`,
            time: timeStr
        };
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    function updateUserStatus(userId, status) {
        console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${status}`);
        const chatItem = document.querySelector(`.chat-item[data-userId="${userId}"]`);
        if (chatItem) {
            const statusElement = chatItem.querySelector('.chat-item-status');
            if (statusElement) {
                // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã —Å—Ç–∞—Ç—É—Å–æ–≤
                statusElement.classList.remove('online', 'offline', 'away');
                // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –∫–ª–∞—Å—Å —Å—Ç–∞—Ç—É—Å–∞
                statusElement.classList.add(status);
            }
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã/–≤–∫–ª–∞–¥–∫–∏
    function handlePageUnload() {
        if (socket && socket.readyState === WebSocket.OPEN) {
            isIntentionalClose = true;
            const statusMsg = {
                type: 'status',
                userId: userId,
                status: 'offline'
            };
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π XMLHttpRequest –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
            const xhr = new XMLHttpRequest();
            xhr.open('POST', '/api/status', false); // false = —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            xhr.setRequestHeader('Content-Type', 'application/json');
            xhr.send(JSON.stringify(statusMsg));
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            socket.close();
        }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.addEventListener('beforeunload', handlePageUnload);
    window.addEventListener('unload', handlePageUnload);
    window.addEventListener('visibilitychange', function() {
        if (document.visibilityState === 'hidden') {
            handlePageUnload();
        } else if (document.visibilityState === 'visible' && (!socket || socket.readyState !== WebSocket.OPEN)) {
            // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
            reconnectAttempts = 0;
            initWebSocket();
        }
    });

    // –§—É–Ω–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞
    function selectChat(otherUserId) {
        console.log(`–í—ã–±—Ä–∞–Ω —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${otherUserId}`);
        
        if (!otherUserId) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —á–∞—Ç: otherUserId is null');
            return;
        }
        
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
            currentChatUserId = otherUserId;
            
            // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç —á–∞—Ç–∞
            const chatItem = findChatItemByUserId(otherUserId);
            
            if (chatItem) {
                // –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
                document.querySelectorAll('.chat-item').forEach(item => item.classList.remove('active'));
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
                chatItem.classList.add('active');
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–ø–∫—É —á–∞—Ç–∞
                updateChatHeader(chatItem);
                
                // –ù–∞ –º–æ–±–∏–ª—å–Ω–æ–º: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å —á–∞—Ç–∞, —Å–∫—Ä—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
                if (isMobile) {
                    const chatList = document.querySelector('.chat-list');
                    const chatArea = document.querySelector('.chat-area');
                    
                    if (chatList) chatList.classList.remove('active');
                    if (chatArea) {
                        chatArea.classList.add('active');
                        chatArea.classList.remove('hidden');
                    }
                }
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
                loadChatHistory(otherUserId);
            } else {
                console.warn(`–ù–µ –Ω–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç —á–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${otherUserId}`);
                // –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–ø–∫—É —á–∞—Ç–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                updateChatHeader(null);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —á–∞—Ç–∞:', error);
        }
    }
}); 